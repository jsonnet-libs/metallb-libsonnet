{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"metallb Jsonnet library","text":"<p>This library is generated with <code>k8s</code>.</p> <ul> <li>0.14</li> </ul>"},{"location":"0.14/","title":"metallb","text":"<pre><code>local metallb = import \"github.com/jsonnet-libs/metallb-libsonnet/0.14/main.libsonnet\"\n</code></pre> <ul> <li>metallb</li> </ul>"},{"location":"0.14/metallb/","title":"metallb","text":"<ul> <li>v1beta1</li> <li>v1beta2</li> </ul>"},{"location":"0.14/metallb/v1beta1/","title":"metallb.v1beta1","text":"<ul> <li>bfdProfile</li> <li>bgpAdvertisement</li> <li>bgpPeer</li> <li>community</li> <li>ipAddressPool</li> <li>l2Advertisement</li> <li>serviceL2Status</li> </ul>"},{"location":"0.14/metallb/v1beta1/bfdProfile/","title":"metallb.v1beta1.bfdProfile","text":"<p>\"BFDProfile represents the settings of the bfd session that can be\\noptionally associated with a BGP session.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDetectMultiplier(detectMultiplier)</code></li> <li><code>fn withEchoInterval(echoInterval)</code></li> <li><code>fn withEchoMode(echoMode)</code></li> <li><code>fn withMinimumTtl(minimumTtl)</code></li> <li><code>fn withPassiveMode(passiveMode)</code></li> <li><code>fn withReceiveInterval(receiveInterval)</code></li> <li><code>fn withTransmitInterval(transmitInterval)</code></li> </ul> </li> </ul>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fields","title":"Fields","text":""},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of BFDProfile</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#obj-spec","title":"obj spec","text":"<p>\"BFDProfileSpec defines the desired state of BFDProfile.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-specwithdetectmultiplier","title":"fn spec.withDetectMultiplier","text":"<pre><code>withDetectMultiplier(detectMultiplier)\n</code></pre> <p>\"Configures the detection multiplier to determine\\npacket loss. The remote transmission interval will be multiplied\\nby this value to determine the connection loss detection timer.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-specwithechointerval","title":"fn spec.withEchoInterval","text":"<pre><code>withEchoInterval(echoInterval)\n</code></pre> <p>\"Configures the minimal echo receive transmission\\ninterval that this system is capable of handling in milliseconds.\\nDefaults to 50ms\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-specwithechomode","title":"fn spec.withEchoMode","text":"<pre><code>withEchoMode(echoMode)\n</code></pre> <p>\"Enables or disables the echo transmission mode.\\nThis mode is disabled by default, and not supported on multi\\nhops setups.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-specwithminimumttl","title":"fn spec.withMinimumTtl","text":"<pre><code>withMinimumTtl(minimumTtl)\n</code></pre> <p>\"For multi hop sessions only: configure the minimum\\nexpected TTL for an incoming BFD control packet.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-specwithpassivemode","title":"fn spec.withPassiveMode","text":"<pre><code>withPassiveMode(passiveMode)\n</code></pre> <p>\"Mark session as passive: a passive session will not\\nattempt to start the connection and will wait for control packets\\nfrom peer before it begins replying.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-specwithreceiveinterval","title":"fn spec.withReceiveInterval","text":"<pre><code>withReceiveInterval(receiveInterval)\n</code></pre> <p>\"The minimum interval that this system is capable of\\nreceiving control packets in milliseconds.\\nDefaults to 300ms.\"</p>"},{"location":"0.14/metallb/v1beta1/bfdProfile/#fn-specwithtransmitinterval","title":"fn spec.withTransmitInterval","text":"<pre><code>withTransmitInterval(transmitInterval)\n</code></pre> <p>\"The minimum transmission interval (less jitter)\\nthat this system wants to use to send BFD control packets in\\nmilliseconds. Defaults to 300ms\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/","title":"metallb.v1beta1.bgpAdvertisement","text":"<p>\"BGPAdvertisement allows to advertise the IPs coming\\nfrom the selected IPAddressPools via BGP, setting the parameters of the\\nBGP Advertisement.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAggregationLength(aggregationLength)</code></li> <li><code>fn withAggregationLengthV6(aggregationLengthV6)</code></li> <li><code>fn withCommunities(communities)</code></li> <li><code>fn withCommunitiesMixin(communities)</code></li> <li><code>fn withIpAddressPoolSelectors(ipAddressPoolSelectors)</code></li> <li><code>fn withIpAddressPoolSelectorsMixin(ipAddressPoolSelectors)</code></li> <li><code>fn withIpAddressPools(ipAddressPools)</code></li> <li><code>fn withIpAddressPoolsMixin(ipAddressPools)</code></li> <li><code>fn withLocalPref(localPref)</code></li> <li><code>fn withNodeSelectors(nodeSelectors)</code></li> <li><code>fn withNodeSelectorsMixin(nodeSelectors)</code></li> <li><code>fn withPeers(peers)</code></li> <li><code>fn withPeersMixin(peers)</code></li> <li><code>obj spec.ipAddressPoolSelectors</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ipAddressPoolSelectors.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.nodeSelectors</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.nodeSelectors.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fields","title":"Fields","text":""},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of BGPAdvertisement</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#obj-spec","title":"obj spec","text":"<p>\"BGPAdvertisementSpec defines the desired state of BGPAdvertisement.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithaggregationlength","title":"fn spec.withAggregationLength","text":"<pre><code>withAggregationLength(aggregationLength)\n</code></pre> <p>\"The aggregation-length advertisement option lets you \u201croll up\u201d the /32s into a larger prefix. Defaults to 32. Works for IPv4 addresses.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithaggregationlengthv6","title":"fn spec.withAggregationLengthV6","text":"<pre><code>withAggregationLengthV6(aggregationLengthV6)\n</code></pre> <p>\"The aggregation-length advertisement option lets you \u201croll up\u201d the /128s into a larger prefix. Defaults to 128. Works for IPv6 addresses.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithcommunities","title":"fn spec.withCommunities","text":"<pre><code>withCommunities(communities)\n</code></pre> <p>\"The BGP communities to be associated with the announcement. Each item can be a standard community of the\\nform 1234:1234, a large community of the form large:1234:1234:1234 or the name of an alias defined in the\\nCommunity CRD.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithcommunitiesmixin","title":"fn spec.withCommunitiesMixin","text":"<pre><code>withCommunitiesMixin(communities)\n</code></pre> <p>\"The BGP communities to be associated with the announcement. Each item can be a standard community of the\\nform 1234:1234, a large community of the form large:1234:1234:1234 or the name of an alias defined in the\\nCommunity CRD.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithipaddresspoolselectors","title":"fn spec.withIpAddressPoolSelectors","text":"<pre><code>withIpAddressPoolSelectors(ipAddressPoolSelectors)\n</code></pre> <p>\"A selector for the IPAddressPools which would get advertised via this advertisement.\\nIf no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithipaddresspoolselectorsmixin","title":"fn spec.withIpAddressPoolSelectorsMixin","text":"<pre><code>withIpAddressPoolSelectorsMixin(ipAddressPoolSelectors)\n</code></pre> <p>\"A selector for the IPAddressPools which would get advertised via this advertisement.\\nIf no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithipaddresspools","title":"fn spec.withIpAddressPools","text":"<pre><code>withIpAddressPools(ipAddressPools)\n</code></pre> <p>\"The list of IPAddressPools to advertise via this advertisement, selected by name.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithipaddresspoolsmixin","title":"fn spec.withIpAddressPoolsMixin","text":"<pre><code>withIpAddressPoolsMixin(ipAddressPools)\n</code></pre> <p>\"The list of IPAddressPools to advertise via this advertisement, selected by name.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithlocalpref","title":"fn spec.withLocalPref","text":"<pre><code>withLocalPref(localPref)\n</code></pre> <p>\"The BGP LOCAL_PREF attribute which is used by BGP best path algorithm,\\nPath with higher localpref is preferred over one with lower localpref.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithnodeselectors","title":"fn spec.withNodeSelectors","text":"<pre><code>withNodeSelectors(nodeSelectors)\n</code></pre> <p>\"NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithnodeselectorsmixin","title":"fn spec.withNodeSelectorsMixin","text":"<pre><code>withNodeSelectorsMixin(nodeSelectors)\n</code></pre> <p>\"NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithpeers","title":"fn spec.withPeers","text":"<pre><code>withPeers(peers)\n</code></pre> <p>\"Peers limits the bgppeer to advertise the ips of the selected pools to.\\nWhen empty, the loadbalancer IP is announced to all the BGPPeers configured.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specwithpeersmixin","title":"fn spec.withPeersMixin","text":"<pre><code>withPeersMixin(peers)\n</code></pre> <p>\"Peers limits the bgppeer to advertise the ips of the selected pools to.\\nWhen empty, the loadbalancer IP is announced to all the BGPPeers configured.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#obj-specipaddresspoolselectors","title":"obj spec.ipAddressPoolSelectors","text":"<p>\"A selector for the IPAddressPools which would get advertised via this advertisement.\\nIf no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specipaddresspoolselectorswithmatchexpressions","title":"fn spec.ipAddressPoolSelectors.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specipaddresspoolselectorswithmatchexpressionsmixin","title":"fn spec.ipAddressPoolSelectors.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specipaddresspoolselectorswithmatchlabels","title":"fn spec.ipAddressPoolSelectors.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specipaddresspoolselectorswithmatchlabelsmixin","title":"fn spec.ipAddressPoolSelectors.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#obj-specipaddresspoolselectorsmatchexpressions","title":"obj spec.ipAddressPoolSelectors.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specipaddresspoolselectorsmatchexpressionswithkey","title":"fn spec.ipAddressPoolSelectors.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specipaddresspoolselectorsmatchexpressionswithoperator","title":"fn spec.ipAddressPoolSelectors.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specipaddresspoolselectorsmatchexpressionswithvalues","title":"fn spec.ipAddressPoolSelectors.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specipaddresspoolselectorsmatchexpressionswithvaluesmixin","title":"fn spec.ipAddressPoolSelectors.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#obj-specnodeselectors","title":"obj spec.nodeSelectors","text":"<p>\"NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specnodeselectorswithmatchexpressions","title":"fn spec.nodeSelectors.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specnodeselectorswithmatchexpressionsmixin","title":"fn spec.nodeSelectors.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specnodeselectorswithmatchlabels","title":"fn spec.nodeSelectors.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specnodeselectorswithmatchlabelsmixin","title":"fn spec.nodeSelectors.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#obj-specnodeselectorsmatchexpressions","title":"obj spec.nodeSelectors.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specnodeselectorsmatchexpressionswithkey","title":"fn spec.nodeSelectors.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specnodeselectorsmatchexpressionswithoperator","title":"fn spec.nodeSelectors.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specnodeselectorsmatchexpressionswithvalues","title":"fn spec.nodeSelectors.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpAdvertisement/#fn-specnodeselectorsmatchexpressionswithvaluesmixin","title":"fn spec.nodeSelectors.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/","title":"metallb.v1beta1.bgpPeer","text":"<p>\"BGPPeer is the Schema for the peers API.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBfdProfile(bfdProfile)</code></li> <li><code>fn withEbgpMultiHop(ebgpMultiHop)</code></li> <li><code>fn withHoldTime(holdTime)</code></li> <li><code>fn withKeepaliveTime(keepaliveTime)</code></li> <li><code>fn withMyASN(myASN)</code></li> <li><code>fn withNodeSelectors(nodeSelectors)</code></li> <li><code>fn withNodeSelectorsMixin(nodeSelectors)</code></li> <li><code>fn withPassword(password)</code></li> <li><code>fn withPeerASN(peerASN)</code></li> <li><code>fn withPeerAddress(peerAddress)</code></li> <li><code>fn withPeerPort(peerPort)</code></li> <li><code>fn withRouterID(routerID)</code></li> <li><code>fn withSourceAddress(sourceAddress)</code></li> <li><code>obj spec.nodeSelectors</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.nodeSelectors.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fields","title":"Fields","text":""},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of BGPPeer</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#obj-spec","title":"obj spec","text":"<p>\"BGPPeerSpec defines the desired state of Peer.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithbfdprofile","title":"fn spec.withBfdProfile","text":"<pre><code>withBfdProfile(bfdProfile)\n</code></pre>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithebgpmultihop","title":"fn spec.withEbgpMultiHop","text":"<pre><code>withEbgpMultiHop(ebgpMultiHop)\n</code></pre> <p>\"EBGP peer is multi-hops away\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithholdtime","title":"fn spec.withHoldTime","text":"<pre><code>withHoldTime(holdTime)\n</code></pre> <p>\"Requested BGP hold time, per RFC4271.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithkeepalivetime","title":"fn spec.withKeepaliveTime","text":"<pre><code>withKeepaliveTime(keepaliveTime)\n</code></pre> <p>\"Requested BGP keepalive time, per RFC4271.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithmyasn","title":"fn spec.withMyASN","text":"<pre><code>withMyASN(myASN)\n</code></pre> <p>\"AS number to use for the local end of the session.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithnodeselectors","title":"fn spec.withNodeSelectors","text":"<pre><code>withNodeSelectors(nodeSelectors)\n</code></pre> <p>\"Only connect to this peer on nodes that match one of these\\nselectors.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithnodeselectorsmixin","title":"fn spec.withNodeSelectorsMixin","text":"<pre><code>withNodeSelectorsMixin(nodeSelectors)\n</code></pre> <p>\"Only connect to this peer on nodes that match one of these\\nselectors.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithpassword","title":"fn spec.withPassword","text":"<pre><code>withPassword(password)\n</code></pre> <p>\"Authentication password for routers enforcing TCP MD5 authenticated sessions\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithpeerasn","title":"fn spec.withPeerASN","text":"<pre><code>withPeerASN(peerASN)\n</code></pre> <p>\"AS number to expect from the remote end of the session.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithpeeraddress","title":"fn spec.withPeerAddress","text":"<pre><code>withPeerAddress(peerAddress)\n</code></pre> <p>\"Address to dial when establishing the session.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithpeerport","title":"fn spec.withPeerPort","text":"<pre><code>withPeerPort(peerPort)\n</code></pre> <p>\"Port to dial when establishing the session.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithrouterid","title":"fn spec.withRouterID","text":"<pre><code>withRouterID(routerID)\n</code></pre> <p>\"BGP router ID to advertise to the peer\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specwithsourceaddress","title":"fn spec.withSourceAddress","text":"<pre><code>withSourceAddress(sourceAddress)\n</code></pre> <p>\"Source address to use when establishing the session.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#obj-specnodeselectors","title":"obj spec.nodeSelectors","text":"<p>\"Only connect to this peer on nodes that match one of these\\nselectors.\"</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specnodeselectorswithmatchexpressions","title":"fn spec.nodeSelectors.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specnodeselectorswithmatchexpressionsmixin","title":"fn spec.nodeSelectors.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specnodeselectorswithmatchlabels","title":"fn spec.nodeSelectors.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specnodeselectorswithmatchlabelsmixin","title":"fn spec.nodeSelectors.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#obj-specnodeselectorsmatchexpressions","title":"obj spec.nodeSelectors.matchExpressions","text":""},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specnodeselectorsmatchexpressionswithkey","title":"fn spec.nodeSelectors.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specnodeselectorsmatchexpressionswithoperator","title":"fn spec.nodeSelectors.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specnodeselectorsmatchexpressionswithvalues","title":"fn spec.nodeSelectors.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"0.14/metallb/v1beta1/bgpPeer/#fn-specnodeselectorsmatchexpressionswithvaluesmixin","title":"fn spec.nodeSelectors.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/community/","title":"metallb.v1beta1.community","text":"<p>\"Community is a collection of aliases for communities.\\nUsers can define named aliases to be used in the BGPPeer CRD.\"</p>"},{"location":"0.14/metallb/v1beta1/community/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withCommunities(communities)</code></li> <li><code>fn withCommunitiesMixin(communities)</code></li> <li><code>obj spec.communities</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.14/metallb/v1beta1/community/#fields","title":"Fields","text":""},{"location":"0.14/metallb/v1beta1/community/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of Community</p>"},{"location":"0.14/metallb/v1beta1/community/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.14/metallb/v1beta1/community/#obj-spec","title":"obj spec","text":"<p>\"CommunitySpec defines the desired state of Community.\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-specwithcommunities","title":"fn spec.withCommunities","text":"<pre><code>withCommunities(communities)\n</code></pre>"},{"location":"0.14/metallb/v1beta1/community/#fn-specwithcommunitiesmixin","title":"fn spec.withCommunitiesMixin","text":"<pre><code>withCommunitiesMixin(communities)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/community/#obj-speccommunities","title":"obj spec.communities","text":""},{"location":"0.14/metallb/v1beta1/community/#fn-speccommunitieswithname","title":"fn spec.communities.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"The name of the alias for the community.\"</p>"},{"location":"0.14/metallb/v1beta1/community/#fn-speccommunitieswithvalue","title":"fn spec.communities.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"The BGP community value corresponding to the given name. Can be a standard community of the form 1234:1234\\nor a large community of the form large:1234:1234:1234.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/","title":"metallb.v1beta1.ipAddressPool","text":"<p>\"IPAddressPool represents a pool of IP addresses that can be allocated\\nto LoadBalancer services.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withAddresses(addresses)</code></li> <li><code>fn withAddressesMixin(addresses)</code></li> <li><code>fn withAutoAssign(autoAssign)</code></li> <li><code>fn withAvoidBuggyIPs(avoidBuggyIPs)</code></li> <li><code>obj spec.serviceAllocation</code><ul> <li><code>fn withNamespaceSelectors(namespaceSelectors)</code></li> <li><code>fn withNamespaceSelectorsMixin(namespaceSelectors)</code></li> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withPriority(priority)</code></li> <li><code>fn withServiceSelectors(serviceSelectors)</code></li> <li><code>fn withServiceSelectorsMixin(serviceSelectors)</code></li> <li><code>obj spec.serviceAllocation.namespaceSelectors</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.serviceAllocation.namespaceSelectors.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.serviceAllocation.serviceSelectors</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.serviceAllocation.serviceSelectors.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fields","title":"Fields","text":""},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of IPAddressPool</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#obj-spec","title":"obj spec","text":"<p>\"IPAddressPoolSpec defines the desired state of IPAddressPool.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specwithaddresses","title":"fn spec.withAddresses","text":"<pre><code>withAddresses(addresses)\n</code></pre> <p>\"A list of IP address ranges over which MetalLB has authority.\\nYou can list multiple ranges in a single pool, they will all share the\\nsame settings. Each range can be either a CIDR prefix, or an explicit\\nstart-end range of IPs.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specwithaddressesmixin","title":"fn spec.withAddressesMixin","text":"<pre><code>withAddressesMixin(addresses)\n</code></pre> <p>\"A list of IP address ranges over which MetalLB has authority.\\nYou can list multiple ranges in a single pool, they will all share the\\nsame settings. Each range can be either a CIDR prefix, or an explicit\\nstart-end range of IPs.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specwithautoassign","title":"fn spec.withAutoAssign","text":"<pre><code>withAutoAssign(autoAssign)\n</code></pre> <p>\"AutoAssign flag used to prevent MetallB from automatic allocation\\nfor a pool.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specwithavoidbuggyips","title":"fn spec.withAvoidBuggyIPs","text":"<pre><code>withAvoidBuggyIPs(avoidBuggyIPs)\n</code></pre> <p>\"AvoidBuggyIPs prevents addresses ending with .0 and .255\\nto be used by a pool.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#obj-specserviceallocation","title":"obj spec.serviceAllocation","text":"<p>\"AllocateTo makes ip pool allocation to specific namespace and/or service.\\nThe controller will use the pool with lowest value of priority in case of\\nmultiple matches. A pool with no priority set will be used only if the\\npools with priority can't be used. If multiple matching IPAddressPools are\\navailable it will check for the availability of IPs sorting the matching\\nIPAddressPools by priority, starting from the highest to the lowest. If\\nmultiple IPAddressPools have the same priority, choice will be random.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationwithnamespaceselectors","title":"fn spec.serviceAllocation.withNamespaceSelectors","text":"<pre><code>withNamespaceSelectors(namespaceSelectors)\n</code></pre> <p>\"NamespaceSelectors list of label selectors to select namespace(s) for ip pool,\\nan alternative to using namespace list.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationwithnamespaceselectorsmixin","title":"fn spec.serviceAllocation.withNamespaceSelectorsMixin","text":"<pre><code>withNamespaceSelectorsMixin(namespaceSelectors)\n</code></pre> <p>\"NamespaceSelectors list of label selectors to select namespace(s) for ip pool,\\nan alternative to using namespace list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationwithnamespaces","title":"fn spec.serviceAllocation.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"Namespaces list of namespace(s) on which ip pool can be attached.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationwithnamespacesmixin","title":"fn spec.serviceAllocation.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"Namespaces list of namespace(s) on which ip pool can be attached.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationwithpriority","title":"fn spec.serviceAllocation.withPriority","text":"<pre><code>withPriority(priority)\n</code></pre> <p>\"Priority priority given for ip pool while ip allocation on a service.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationwithserviceselectors","title":"fn spec.serviceAllocation.withServiceSelectors","text":"<pre><code>withServiceSelectors(serviceSelectors)\n</code></pre> <p>\"ServiceSelectors list of label selector to select service(s) for which ip pool\\ncan be used for ip allocation.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationwithserviceselectorsmixin","title":"fn spec.serviceAllocation.withServiceSelectorsMixin","text":"<pre><code>withServiceSelectorsMixin(serviceSelectors)\n</code></pre> <p>\"ServiceSelectors list of label selector to select service(s) for which ip pool\\ncan be used for ip allocation.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#obj-specserviceallocationnamespaceselectors","title":"obj spec.serviceAllocation.namespaceSelectors","text":"<p>\"NamespaceSelectors list of label selectors to select namespace(s) for ip pool,\\nan alternative to using namespace list.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationnamespaceselectorswithmatchexpressions","title":"fn spec.serviceAllocation.namespaceSelectors.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationnamespaceselectorswithmatchexpressionsmixin","title":"fn spec.serviceAllocation.namespaceSelectors.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationnamespaceselectorswithmatchlabels","title":"fn spec.serviceAllocation.namespaceSelectors.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationnamespaceselectorswithmatchlabelsmixin","title":"fn spec.serviceAllocation.namespaceSelectors.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#obj-specserviceallocationnamespaceselectorsmatchexpressions","title":"obj spec.serviceAllocation.namespaceSelectors.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationnamespaceselectorsmatchexpressionswithkey","title":"fn spec.serviceAllocation.namespaceSelectors.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationnamespaceselectorsmatchexpressionswithoperator","title":"fn spec.serviceAllocation.namespaceSelectors.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationnamespaceselectorsmatchexpressionswithvalues","title":"fn spec.serviceAllocation.namespaceSelectors.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationnamespaceselectorsmatchexpressionswithvaluesmixin","title":"fn spec.serviceAllocation.namespaceSelectors.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#obj-specserviceallocationserviceselectors","title":"obj spec.serviceAllocation.serviceSelectors","text":"<p>\"ServiceSelectors list of label selector to select service(s) for which ip pool\\ncan be used for ip allocation.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationserviceselectorswithmatchexpressions","title":"fn spec.serviceAllocation.serviceSelectors.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationserviceselectorswithmatchexpressionsmixin","title":"fn spec.serviceAllocation.serviceSelectors.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationserviceselectorswithmatchlabels","title":"fn spec.serviceAllocation.serviceSelectors.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationserviceselectorswithmatchlabelsmixin","title":"fn spec.serviceAllocation.serviceSelectors.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#obj-specserviceallocationserviceselectorsmatchexpressions","title":"obj spec.serviceAllocation.serviceSelectors.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationserviceselectorsmatchexpressionswithkey","title":"fn spec.serviceAllocation.serviceSelectors.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationserviceselectorsmatchexpressionswithoperator","title":"fn spec.serviceAllocation.serviceSelectors.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationserviceselectorsmatchexpressionswithvalues","title":"fn spec.serviceAllocation.serviceSelectors.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p>"},{"location":"0.14/metallb/v1beta1/ipAddressPool/#fn-specserviceallocationserviceselectorsmatchexpressionswithvaluesmixin","title":"fn spec.serviceAllocation.serviceSelectors.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/","title":"metallb.v1beta1.l2Advertisement","text":"<p>\"L2Advertisement allows to advertise the LoadBalancer IPs provided\\nby the selected pools via L2.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withInterfaces(interfaces)</code></li> <li><code>fn withInterfacesMixin(interfaces)</code></li> <li><code>fn withIpAddressPoolSelectors(ipAddressPoolSelectors)</code></li> <li><code>fn withIpAddressPoolSelectorsMixin(ipAddressPoolSelectors)</code></li> <li><code>fn withIpAddressPools(ipAddressPools)</code></li> <li><code>fn withIpAddressPoolsMixin(ipAddressPools)</code></li> <li><code>fn withNodeSelectors(nodeSelectors)</code></li> <li><code>fn withNodeSelectorsMixin(nodeSelectors)</code></li> <li><code>obj spec.ipAddressPoolSelectors</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.ipAddressPoolSelectors.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.nodeSelectors</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.nodeSelectors.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fields","title":"Fields","text":""},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of L2Advertisement</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#obj-spec","title":"obj spec","text":"<p>\"L2AdvertisementSpec defines the desired state of L2Advertisement.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specwithinterfaces","title":"fn spec.withInterfaces","text":"<pre><code>withInterfaces(interfaces)\n</code></pre> <p>\"A list of interfaces to announce from. The LB IP will be announced only from these interfaces.\\nIf the field is not set, we advertise from all the interfaces on the host.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specwithinterfacesmixin","title":"fn spec.withInterfacesMixin","text":"<pre><code>withInterfacesMixin(interfaces)\n</code></pre> <p>\"A list of interfaces to announce from. The LB IP will be announced only from these interfaces.\\nIf the field is not set, we advertise from all the interfaces on the host.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specwithipaddresspoolselectors","title":"fn spec.withIpAddressPoolSelectors","text":"<pre><code>withIpAddressPoolSelectors(ipAddressPoolSelectors)\n</code></pre> <p>\"A selector for the IPAddressPools which would get advertised via this advertisement.\\nIf no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specwithipaddresspoolselectorsmixin","title":"fn spec.withIpAddressPoolSelectorsMixin","text":"<pre><code>withIpAddressPoolSelectorsMixin(ipAddressPoolSelectors)\n</code></pre> <p>\"A selector for the IPAddressPools which would get advertised via this advertisement.\\nIf no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specwithipaddresspools","title":"fn spec.withIpAddressPools","text":"<pre><code>withIpAddressPools(ipAddressPools)\n</code></pre> <p>\"The list of IPAddressPools to advertise via this advertisement, selected by name.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specwithipaddresspoolsmixin","title":"fn spec.withIpAddressPoolsMixin","text":"<pre><code>withIpAddressPoolsMixin(ipAddressPools)\n</code></pre> <p>\"The list of IPAddressPools to advertise via this advertisement, selected by name.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specwithnodeselectors","title":"fn spec.withNodeSelectors","text":"<pre><code>withNodeSelectors(nodeSelectors)\n</code></pre> <p>\"NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specwithnodeselectorsmixin","title":"fn spec.withNodeSelectorsMixin","text":"<pre><code>withNodeSelectorsMixin(nodeSelectors)\n</code></pre> <p>\"NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#obj-specipaddresspoolselectors","title":"obj spec.ipAddressPoolSelectors","text":"<p>\"A selector for the IPAddressPools which would get advertised via this advertisement.\\nIf no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specipaddresspoolselectorswithmatchexpressions","title":"fn spec.ipAddressPoolSelectors.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specipaddresspoolselectorswithmatchexpressionsmixin","title":"fn spec.ipAddressPoolSelectors.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specipaddresspoolselectorswithmatchlabels","title":"fn spec.ipAddressPoolSelectors.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specipaddresspoolselectorswithmatchlabelsmixin","title":"fn spec.ipAddressPoolSelectors.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#obj-specipaddresspoolselectorsmatchexpressions","title":"obj spec.ipAddressPoolSelectors.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specipaddresspoolselectorsmatchexpressionswithkey","title":"fn spec.ipAddressPoolSelectors.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specipaddresspoolselectorsmatchexpressionswithoperator","title":"fn spec.ipAddressPoolSelectors.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specipaddresspoolselectorsmatchexpressionswithvalues","title":"fn spec.ipAddressPoolSelectors.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specipaddresspoolselectorsmatchexpressionswithvaluesmixin","title":"fn spec.ipAddressPoolSelectors.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#obj-specnodeselectors","title":"obj spec.nodeSelectors","text":"<p>\"NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specnodeselectorswithmatchexpressions","title":"fn spec.nodeSelectors.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specnodeselectorswithmatchexpressionsmixin","title":"fn spec.nodeSelectors.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specnodeselectorswithmatchlabels","title":"fn spec.nodeSelectors.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specnodeselectorswithmatchlabelsmixin","title":"fn spec.nodeSelectors.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#obj-specnodeselectorsmatchexpressions","title":"obj spec.nodeSelectors.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specnodeselectorsmatchexpressionswithkey","title":"fn spec.nodeSelectors.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specnodeselectorsmatchexpressionswithoperator","title":"fn spec.nodeSelectors.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specnodeselectorsmatchexpressionswithvalues","title":"fn spec.nodeSelectors.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p>"},{"location":"0.14/metallb/v1beta1/l2Advertisement/#fn-specnodeselectorsmatchexpressionswithvaluesmixin","title":"fn spec.nodeSelectors.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/","title":"metallb.v1beta1.serviceL2Status","text":"<p>\"ServiceL2Status reveals the actual traffic status of loadbalancer services in layer2 mode.\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>fn withSpec(spec)</code></li> <li><code>fn withSpecMixin(spec)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> </ul>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fields","title":"Fields","text":""},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of ServiceL2Status</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-withspec","title":"fn withSpec","text":"<pre><code>withSpec(spec)\n</code></pre> <p>\"ServiceL2StatusSpec defines the desired state of ServiceL2Status.\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-withspecmixin","title":"fn withSpecMixin","text":"<pre><code>withSpecMixin(spec)\n</code></pre> <p>\"ServiceL2StatusSpec defines the desired state of ServiceL2Status.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.14/metallb/v1beta1/serviceL2Status/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.14/metallb/v1beta2/","title":"metallb.v1beta2","text":"<ul> <li>bgpPeer</li> </ul>"},{"location":"0.14/metallb/v1beta2/bgpPeer/","title":"metallb.v1beta2.bgpPeer","text":"<p>\"BGPPeer is the Schema for the peers API.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withBfdProfile(bfdProfile)</code></li> <li><code>fn withConnectTime(connectTime)</code></li> <li><code>fn withDisableMP(disableMP)</code></li> <li><code>fn withEbgpMultiHop(ebgpMultiHop)</code></li> <li><code>fn withEnableGracefulRestart(enableGracefulRestart)</code></li> <li><code>fn withHoldTime(holdTime)</code></li> <li><code>fn withKeepaliveTime(keepaliveTime)</code></li> <li><code>fn withMyASN(myASN)</code></li> <li><code>fn withNodeSelectors(nodeSelectors)</code></li> <li><code>fn withNodeSelectorsMixin(nodeSelectors)</code></li> <li><code>fn withPassword(password)</code></li> <li><code>fn withPeerASN(peerASN)</code></li> <li><code>fn withPeerAddress(peerAddress)</code></li> <li><code>fn withPeerPort(peerPort)</code></li> <li><code>fn withRouterID(routerID)</code></li> <li><code>fn withSourceAddress(sourceAddress)</code></li> <li><code>fn withVrf(vrf)</code></li> <li><code>obj spec.nodeSelectors</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.nodeSelectors.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.passwordSecret</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fields","title":"Fields","text":""},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of BGPPeer</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#obj-spec","title":"obj spec","text":"<p>\"BGPPeerSpec defines the desired state of Peer.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithbfdprofile","title":"fn spec.withBfdProfile","text":"<pre><code>withBfdProfile(bfdProfile)\n</code></pre> <p>\"The name of the BFD Profile to be used for the BFD session associated to the BGP session. If not set, the BFD session won't be set up.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithconnecttime","title":"fn spec.withConnectTime","text":"<pre><code>withConnectTime(connectTime)\n</code></pre> <p>\"Requested BGP connect time, controls how long BGP waits between connection attempts to a neighbor.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithdisablemp","title":"fn spec.withDisableMP","text":"<pre><code>withDisableMP(disableMP)\n</code></pre> <p>\"To set if we want to disable MP BGP that will separate IPv4 and IPv6 route exchanges into distinct BGP sessions.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithebgpmultihop","title":"fn spec.withEbgpMultiHop","text":"<pre><code>withEbgpMultiHop(ebgpMultiHop)\n</code></pre> <p>\"To set if the BGPPeer is multi-hops away. Needed for FRR mode only.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithenablegracefulrestart","title":"fn spec.withEnableGracefulRestart","text":"<pre><code>withEnableGracefulRestart(enableGracefulRestart)\n</code></pre> <p>\"EnableGracefulRestart allows BGP peer to continue to forward data packets along\\nknown routes while the routing protocol information is being restored.\\nThis field is immutable because it requires restart of the BGP session\\nSupported for FRR mode only.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithholdtime","title":"fn spec.withHoldTime","text":"<pre><code>withHoldTime(holdTime)\n</code></pre> <p>\"Requested BGP hold time, per RFC4271.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithkeepalivetime","title":"fn spec.withKeepaliveTime","text":"<pre><code>withKeepaliveTime(keepaliveTime)\n</code></pre> <p>\"Requested BGP keepalive time, per RFC4271.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithmyasn","title":"fn spec.withMyASN","text":"<pre><code>withMyASN(myASN)\n</code></pre> <p>\"AS number to use for the local end of the session.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithnodeselectors","title":"fn spec.withNodeSelectors","text":"<pre><code>withNodeSelectors(nodeSelectors)\n</code></pre> <p>\"Only connect to this peer on nodes that match one of these\\nselectors.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithnodeselectorsmixin","title":"fn spec.withNodeSelectorsMixin","text":"<pre><code>withNodeSelectorsMixin(nodeSelectors)\n</code></pre> <p>\"Only connect to this peer on nodes that match one of these\\nselectors.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithpassword","title":"fn spec.withPassword","text":"<pre><code>withPassword(password)\n</code></pre> <p>\"Authentication password for routers enforcing TCP MD5 authenticated sessions\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithpeerasn","title":"fn spec.withPeerASN","text":"<pre><code>withPeerASN(peerASN)\n</code></pre> <p>\"AS number to expect from the remote end of the session.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithpeeraddress","title":"fn spec.withPeerAddress","text":"<pre><code>withPeerAddress(peerAddress)\n</code></pre> <p>\"Address to dial when establishing the session.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithpeerport","title":"fn spec.withPeerPort","text":"<pre><code>withPeerPort(peerPort)\n</code></pre> <p>\"Port to dial when establishing the session.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithrouterid","title":"fn spec.withRouterID","text":"<pre><code>withRouterID(routerID)\n</code></pre> <p>\"BGP router ID to advertise to the peer\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithsourceaddress","title":"fn spec.withSourceAddress","text":"<pre><code>withSourceAddress(sourceAddress)\n</code></pre> <p>\"Source address to use when establishing the session.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specwithvrf","title":"fn spec.withVrf","text":"<pre><code>withVrf(vrf)\n</code></pre> <p>\"To set if we want to peer with the BGPPeer using an interface belonging to\\na host vrf\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#obj-specnodeselectors","title":"obj spec.nodeSelectors","text":"<p>\"Only connect to this peer on nodes that match one of these\\nselectors.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specnodeselectorswithmatchexpressions","title":"fn spec.nodeSelectors.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specnodeselectorswithmatchexpressionsmixin","title":"fn spec.nodeSelectors.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specnodeselectorswithmatchlabels","title":"fn spec.nodeSelectors.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specnodeselectorswithmatchlabelsmixin","title":"fn spec.nodeSelectors.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#obj-specnodeselectorsmatchexpressions","title":"obj spec.nodeSelectors.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specnodeselectorsmatchexpressionswithkey","title":"fn spec.nodeSelectors.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specnodeselectorsmatchexpressionswithoperator","title":"fn spec.nodeSelectors.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specnodeselectorsmatchexpressionswithvalues","title":"fn spec.nodeSelectors.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specnodeselectorsmatchexpressionswithvaluesmixin","title":"fn spec.nodeSelectors.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#obj-specpasswordsecret","title":"obj spec.passwordSecret","text":"<p>\"passwordSecret is name of the authentication secret for BGP Peer.\\nthe secret must be of type \\\"kubernetes.io/basic-auth\\\", and created in the\\nsame namespace as the MetalLB deployment. The password is stored in the\\nsecret as the key \\\"password\\\".\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specpasswordsecretwithname","title":"fn spec.passwordSecret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"name is unique within a namespace to reference a secret resource.\"</p>"},{"location":"0.14/metallb/v1beta2/bgpPeer/#fn-specpasswordsecretwithnamespace","title":"fn spec.passwordSecret.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"namespace defines the space within which the secret name must be unique.\"</p>"}]}